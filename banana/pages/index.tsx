import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useState, useEffect, useCallback } from "react";
import NumberButton from "@components/NumberButton";
import NumberDisplay from "@components/NumberDisplay";
import OperatorButton from "@components/OperatorButton";
import { app } from "../firebase/firebase";
import {
  getFirestore,
  collection,
  doc,
  getDoc,
  setDoc,
} from "firebase/firestore";

const Home: NextPage = () => {
  const [display, setDisplay] = useState("");
  const [lastOperator, setLastOperator] = useState<string | null>(null);
  const [isLastInputOperator, setIsLastInputOperator] = useState<
    boolean | null
  >(null);
  const [numberMainBox, setNumberMainBox] = useState<number | null>(null);
  const collectionName = "calculated_data";
  const docName = "result";

  const pressNumber = useCallback(
    (number: number) => {
      if (isLastInputOperator) {
        setIsLastInputOperator(false);

        setNumberMainBox(Number(`${display}`));
        setDisplay(`${number}`);
      } else {
        setDisplay((current) => `${current}${number}`);
      }
    },
    [isLastInputOperator]
  );

  const calculate = (operator: string, num1: number, num2: number): number => {
    switch (operator) {
      case "+":
        return num1 + num2;
      case "-":
        return num1 - num2;
      case "√ó":
        return num1 * num2;
      case "√∑":
        return num1 / num2;
      default:
        return num1;
    }
  };

  const pressOperator = (operator: string) => {
    if (numberMainBox) {
      const calcResult = calculate(
        lastOperator!,
        numberMainBox,
        Number(display)
      );

      setNumberMainBox(calcResult);
      setDisplay(`${calcResult}`);
    }

    setLastOperator(operator);
    setIsLastInputOperator(true);

    if (operator === "üê∞") {
      // XXX: setNumberMainBox„ÅÆÁõ¥Âæå„ÄÅnumberMainBox„ÅåÊõ¥Êñ∞„Åï„Çå„Å¶„Çã„Å®„ÅØÈôê„Çâ„Å™„ÅÑ
      setNumberMainBox(null);
      setDisplay("");
      setLastOperator(null);
      setIsLastInputOperator(false);
    }
  };

  // TODO: db„Åã„Çâ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÇÄ -> Ë™≠„ÅøËæº„Çì„Å†„Éá„Éº„Çø„ÇídisplayÂ§âÊï∞„Å´Ê†ºÁ¥ç„Åô„Çã
  const read = () => {
    const db = getFirestore(app);

    const docRef = doc(db, collectionName, docName);
    getDoc(docRef).then((docSnap: any) => {
      const num = docSnap.data().number;
      setDisplay(num.toString());
    });
  };

  // TODO: db„Å´displayÂ§âÊï∞„ÅÆÂÜÖÂÆπ„Çí‰øùÂ≠ò„Åô„Çã
  const store = () => {
    const db = getFirestore(app);
    const calcDataCollection = collection(db, collectionName);
    const calcDataDoc = doc(calcDataCollection, docName);
    setDoc(calcDataDoc, { number: Number(display) });
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>ÈõªÂçì</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          <div className="grid grid-cols-4 gap-3">
            <NumberDisplay display={display} />
            <NumberButton num={7} onPressNumber={pressNumber} />
            <NumberButton num={8} onPressNumber={pressNumber} />
            <NumberButton num={9} onPressNumber={pressNumber} />
            <OperatorButton operator={"üê∞"} onPressOperator={pressOperator} />
            <NumberButton num={4} onPressNumber={pressNumber} />
            <NumberButton num={5} onPressNumber={pressNumber} />
            <NumberButton num={6} onPressNumber={pressNumber} />
            <OperatorButton operator={"="} onPressOperator={pressOperator} />
            <NumberButton num={1} onPressNumber={pressNumber} />
            <NumberButton num={2} onPressNumber={pressNumber} />
            <NumberButton num={3} onPressNumber={pressNumber} />
            <OperatorButton operator={"+"} onPressOperator={pressOperator} />
            <NumberButton num={0} onPressNumber={pressNumber} />
            <OperatorButton operator={"√∑"} onPressOperator={pressOperator} />
            <OperatorButton operator={"√ó"} onPressOperator={pressOperator} />
            <OperatorButton operator={"-"} onPressOperator={pressOperator} />
          </div>
          <button className="btn btn-primary" onClick={read}>
            read
          </button>
          <button className="btn btn-secondary ml-8" onClick={store}>
            store
          </button>
        </h1>
      </main>
    </div>
  );
};

export default Home;
